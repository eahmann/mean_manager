{"version":3,"sources":["../src/MapBase.js"],"names":[],"mappings":";;;;;;;;;;oBAAuB,QAAQ;;;;IAGV,OAAO;cAAP,OAAO;OAEf,MAAM,CAAC,OAAO;OAAC,eAAG;AAC7B,UAAO,IAAI,CAAA;GACX;;;AAEU,UANS,OAAO,GAMO;MAAtB,QAAQ,yDAAG,SAAS;;wBANZ,OAAO;;AAO1B,MAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAA,CAAA;AACrB,MAAI,CAAC,KAAK,EAAE,CAAA;AACZ,MAAI,QAAQ,IAAI,IAAI;;;;;;AAAE,yBAAgB,QAAQ;SAAb,CAAC;AAAc,SAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;KAAA;;;;;;;;;;;;;;;GAAA;EACpE;;cAVmB,OAAO;;SAWtB,iBAAG,EAAE;;;;;;;;;;SAWH,iBAAC,UAAU,EAAuB;OAArB,OAAO,yDAAG,SAAS;;AACtC,OAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;GACxC;;OACA,MAAM,CAAC,QAAQ;SAAC,iBAAG;AACnB,UAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAA;GACrC;;;SAEM,mBAAG;AACT,UAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAA;GAC5B;;;SACG,gBAAG;AACN,UAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAA;GACzB;;;SACK,kBAAG;AACR,UAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAA;GAC3B;;;SAEE,aAAC,GAAG,EAAE;AACR,UAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;GAC3B;;;SACE,aAAC,GAAG,EAAE;AACR,UAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;GAC3B;;;SACE,aAAC,GAAG,EAAE,KAAK,EAAE;AACf,OAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;AAC3B,UAAO,IAAI,CAAA;GACX;;;SACK,iBAAC,GAAG,EAAE;AACX,UAAO,IAAI,CAAC,MAAM,UAAO,CAAC,GAAG,CAAC,CAAA;GAC9B;;;SACI,iBAAG;AACP,OAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;GACnB;;;OAnCO,eAAG;AACV,UAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAA;GACvB;;;QArBmB,OAAO;;;qBAAP,OAAO","file":"MapBase.js","sourcesContent":["import {readonly} from './util'\n\n// Babel currently not support extends built-in Map, so use delegation instead\nexport default class MapBase {\n\n\tstatic get [Symbol.species]() {\n\t\treturn this\n\t}\n\n\tconstructor(iterable = undefined) {\n\t\tthis._super = new Map\n\t\tthis._init()\n\t\tif (iterable != null) for (const v of iterable) this.set(v[0], v[1])\n\t}\n\t_init() {}\n\n\t// Currently no way to declare data properties on class prototype\n\t// And class properties not support computed property names, see https://gist.github.com/jeffmo/054df782c05639da2adb\n\t// And problematic use decorator with computed property names, see https://github.com/wycats/javascript-decorators/issues/10\n\n\t// @readonly proto [Symbol.toStringTag] = 'Map'\n\n\tget size() {\n\t\treturn this._super.size\n\t}\n\tforEach(callbackfn, thisArg = undefined) {\n\t\tthis._super.forEach(callbackfn, thisArg)\n\t}\n\t[Symbol.iterator]() {\n\t\treturn this._super[Symbol.iterator]()\n\t}\n\n\tentries() {\n\t\treturn this._super.entries()\n\t}\n\tkeys() {\n\t\treturn this._super.keys()\n\t}\n\tvalues() {\n\t\treturn this._super.values()\n\t}\n\n\thas(key) {\n\t\treturn this._super.has(key)\n\t}\n\tget(key) {\n\t\treturn this._super.get(key)\n\t}\n\tset(key, value) {\n\t\tthis._super.set(key, value)\n\t\treturn this\n\t}\n\tdelete(key) {\n\t\treturn this._super.delete(key)\n\t}\n\tclear() {\n\t\tthis._super.clear()\n\t}\n\n}\n"]}