'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _MapBase2 = require('./MapBase');

var _MapBase3 = _interopRequireDefault(_MapBase2);

var _util = require('./util');

var ArrayMap = (function (_MapBase) {
	_inherits(ArrayMap, _MapBase);

	function ArrayMap() {
		_classCallCheck(this, ArrayMap);

		_get(Object.getPrototypeOf(ArrayMap.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(ArrayMap, [{
		key: '_init',
		value: function _init() {
			this._tri = [];
		}
	}, {
		key: 'clear',
		value: function clear() {
			this._tri = [];
			_get(Object.getPrototypeOf(ArrayMap.prototype), 'clear', this).call(this);
		}
	}, {
		key: 'has',
		value: function has(key) {
			if (_get(Object.getPrototypeOf(ArrayMap.prototype), 'has', this).call(this, key)) return true;
			if (!Array.isArray(key)) return false;
			var node = this._tri[key.length];
			if (!node) return false;
			for (var i = 0; i < key.length; ++i) {
				node = node.get(key[i]);
				if (!node) return false;
			}
			return _get(Object.getPrototypeOf(ArrayMap.prototype), 'has', this).call(this, node);
		}
	}, {
		key: 'get',
		value: function get(key) {
			var result = _get(Object.getPrototypeOf(ArrayMap.prototype), 'get', this).call(this, key);
			if (result !== undefined) return result;
			if (_get(Object.getPrototypeOf(ArrayMap.prototype), 'has', this).call(this, key)) return undefined;
			if (!Array.isArray(key)) return undefined;
			var node = this._tri[key.length];
			if (!node) return undefined;
			for (var i = 0; i < key.length; ++i) {
				node = node.get(key[i]);
				if (!node) return undefined;
			}
			return _get(Object.getPrototypeOf(ArrayMap.prototype), 'get', this).call(this, node);
		}
	}, {
		key: 'set',
		value: function set(key, value) {
			if (!Array.isArray(key)) return _get(Object.getPrototypeOf(ArrayMap.prototype), 'set', this).call(this, key, value);
			var SC = (0, _util.getSpeciesConstructor)(this, ArrayMap);
			var node = this._tri[key.length],
			    i = 0;
			var add = function add() {
				var n = key.length - 1;
				while (i < n) {
					var newNode = new SC();
					node.set(key[i], newNode);
					node = newNode;
					++i;
				}
				node.set(key[n], key);
				node = key;
			};
			if (!node) {
				this._tri[key.length] = node = new SC();
				add();
			} else {
				while (i < key.length) {
					var n = node.get(key[i]);
					if (!n) {
						add();
						break;
					}
					node = n;
					++i;
				}
			}
			return _get(Object.getPrototypeOf(ArrayMap.prototype), 'set', this).call(this, node, value);
		}
	}, {
		key: 'delete',
		value: function _delete(key) {
			if (!Array.isArray(key)) return _get(Object.getPrototypeOf(ArrayMap.prototype), 'delete', this).call(this, key);
			var refs = [];
			var node = this._tri[key.length];
			if (!node) return false;
			for (var i = 0; i < key.length; ++i) {
				var k = key[i];
				refs.push([node, k]);
				node = node.get(k);
				if (!node) return false;
			}
			var result = _get(Object.getPrototypeOf(ArrayMap.prototype), 'delete', this).call(this, node);
			while (refs.length > 0) {
				var _refs$pop = refs.pop();

				var _refs$pop2 = _slicedToArray(_refs$pop, 2);

				var _node = _refs$pop2[0];
				var _key = _refs$pop2[1];

				_node['delete'](_key);
				if (_node.size > 0) break;
			}
			return result;
		}
	}]);

	return ArrayMap;
})(_MapBase3['default']);

exports['default'] = ArrayMap;
module.exports = exports['default'];
//# sourceMappingURL=ArrayMap.js.map