'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _util = require('./util');

var equals = Symbol['for']('equals');

var eq = function eq(a, b) {
	if (Object.is(a, b)) return true;
	var at = typeof a,
	    bt = typeof b;
	if (at !== bt) return false;
	if (at !== 'object') return false;
	if (a === null || b === null) return false;
	if (typeof a[equals] === 'function') return a[equals](b);
	return false;
};
exports['default'] = eq;

Object.prototype[equals] = function (x) {
	if (!(0, _util.isObject)(x)) return false;
	var p = Object.getPrototypeOf(this),
	    xp = Object.getPrototypeOf(x);
	if (p !== xp) return false;
	var keys = Object.getOwnPropertySymbols(this).concat(Object.getOwnPropertyNames(this));
	for (var i = 0; i < keys.length; ++i) {
		var k = keys[i];
		if (/^Symbol\(id\)_/.test(k)) continue; // bypass core-js Map hack
		if (!eq(this[k], x[k])) return false;
	}
	return true;
};

Array.prototype[equals] = function (x) {
	if (!Array.isArray(x)) return false;
	if (this.length !== x.length) return false;
	for (var i = 0; i < this.length; ++i) {
		if (!eq(this[i], x[i])) return false;
	}
	return true;
};

Map.prototype[equals] = function (x) {
	if (!(x instanceof Map)) return false;
	if (this.size !== x.size) return false;
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = this[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var _step$value = _slicedToArray(_step.value, 2);

			var key = _step$value[0];
			var value = _step$value[1];

			if (!eq(x.get(key), value)) return false;
			if (value === undefined && !x.has(key)) return false;
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator['return']) {
				_iterator['return']();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return true;
};

Set.prototype[equals] = function (x) {
	if (!(x instanceof Set)) return false;
	if (this.size !== x.size) return false;
	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;

	try {
		for (var _iterator2 = this[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
			var value = _step2.value;

			if (!x.has(value)) return false;
		}
	} catch (err) {
		_didIteratorError2 = true;
		_iteratorError2 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion2 && _iterator2['return']) {
				_iterator2['return']();
			}
		} finally {
			if (_didIteratorError2) {
				throw _iteratorError2;
			}
		}
	}

	return true;
};
module.exports = exports['default'];
//# sourceMappingURL=eq.js.map