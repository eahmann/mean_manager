'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _util = require('./util');

// Babel currently not support extends built-in Map, so use delegation instead

var MapBase = (function () {
	_createClass(MapBase, null, [{
		key: Symbol.species,
		get: function get() {
			return this;
		}
	}]);

	function MapBase() {
		var iterable = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];

		_classCallCheck(this, MapBase);

		this._super = new Map();
		this._init();
		if (iterable != null) {
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var v = _step.value;
					this.set(v[0], v[1]);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator['return']) {
						_iterator['return']();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}
	}

	_createClass(MapBase, [{
		key: '_init',
		value: function _init() {}

		// Currently no way to declare data properties on class prototype
		// And class properties not support computed property names, see https://gist.github.com/jeffmo/054df782c05639da2adb
		// And problematic use decorator with computed property names, see https://github.com/wycats/javascript-decorators/issues/10

		// @readonly proto [Symbol.toStringTag] = 'Map'

	}, {
		key: 'forEach',
		value: function forEach(callbackfn) {
			var thisArg = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

			this._super.forEach(callbackfn, thisArg);
		}
	}, {
		key: Symbol.iterator,
		value: function value() {
			return this._super[Symbol.iterator]();
		}
	}, {
		key: 'entries',
		value: function entries() {
			return this._super.entries();
		}
	}, {
		key: 'keys',
		value: function keys() {
			return this._super.keys();
		}
	}, {
		key: 'values',
		value: function values() {
			return this._super.values();
		}
	}, {
		key: 'has',
		value: function has(key) {
			return this._super.has(key);
		}
	}, {
		key: 'get',
		value: function get(key) {
			return this._super.get(key);
		}
	}, {
		key: 'set',
		value: function set(key, value) {
			this._super.set(key, value);
			return this;
		}
	}, {
		key: 'delete',
		value: function _delete(key) {
			return this._super['delete'](key);
		}
	}, {
		key: 'clear',
		value: function clear() {
			this._super.clear();
		}
	}, {
		key: 'size',
		get: function get() {
			return this._super.size;
		}
	}]);

	return MapBase;
})();

exports['default'] = MapBase;
module.exports = exports['default'];
//# sourceMappingURL=MapBase.js.map