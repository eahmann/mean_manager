{"version":3,"sources":["../src/HashMap.js"],"names":[],"mappings":"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","file":"HashMap.js","sourcesContent":["import MapBase from './MapBase'\nimport eq from './eq'\nimport {isObject} from './util'\nconst hashCode = Symbol.for('hashCode')\n\nexport default class HashMap extends MapBase {\n\t_init() {\n\t\tthis._store = new Map\n\t}\n\tclear() {\n\t\tthis._store.clear()\n\t\tsuper.clear()\n\t}\n\thas(key) {\n\t\tif (super.has(key)) return true\n\t\tif (!(typeof key[hashCode] === 'function')) return false\n\t\tconst code = key[hashCode]()\n\t\tconst list = this._store.get(code)\n\t\tif (!list) return false\n\t\treturn list.some(x => eq(x, key))\n\t}\n\tget(key) {\n\t\tconst result = super.get(key)\n\t\tif (result !== undefined) return result\n\t\tif (super.has(key)) return undefined\n\t\tif (!(typeof key[hashCode] === 'function')) return undefined\n\t\tconst code = key[hashCode]()\n\t\tconst list = this._store.get(code)\n\t\tif (!list) return undefined\n\t\tkey = list.find(x => eq(x, key))\n\t\tif (key === undefined) return undefined\n\t\treturn super.get(key)\n\t}\n\tset(key, value) {\n\t\tif (!(isObject(key) && typeof key[hashCode] === 'function')) return super.set(key, value)\n\t\tconst code = key[hashCode]()\n\t\tlet list = this._store.get(code)\n\t\tif (!list) this._store.set(code, list = [key])\n\t\telse {\n\t\t\tconst k = list.find(x => eq(x, key))\n\t\t\tif (!k) list.push(key)\n\t\t\telse key = k\n\t\t}\n\t\treturn super.set(key, value)\n\t}\n\tdelete(key) {\n\t\tif (!(isObject(key) && typeof key[hashCode] === 'function')) return super.delete(key)\n\t\tconst code = key[hashCode]()\n\t\tconst list = this._store.get(code)\n\t\tif (!list) return false\n\t\tconst i = list.findIndex(x => eq(x, key))\n\t\tif (!(i >= 0)) return false\n\t\tconst [k] = list.splice(i, 1)\n\t\treturn super.delete(k)\n\t}\n}\n"]}