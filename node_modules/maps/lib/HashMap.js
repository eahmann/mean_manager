'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _MapBase2 = require('./MapBase');

var _MapBase3 = _interopRequireDefault(_MapBase2);

var _eq = require('./eq');

var _eq2 = _interopRequireDefault(_eq);

var _util = require('./util');

var hashCode = Symbol['for']('hashCode');

var HashMap = (function (_MapBase) {
	_inherits(HashMap, _MapBase);

	function HashMap() {
		_classCallCheck(this, HashMap);

		_get(Object.getPrototypeOf(HashMap.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(HashMap, [{
		key: '_init',
		value: function _init() {
			this._store = new Map();
		}
	}, {
		key: 'clear',
		value: function clear() {
			this._store.clear();
			_get(Object.getPrototypeOf(HashMap.prototype), 'clear', this).call(this);
		}
	}, {
		key: 'has',
		value: function has(key) {
			if (_get(Object.getPrototypeOf(HashMap.prototype), 'has', this).call(this, key)) return true;
			if (!(typeof key[hashCode] === 'function')) return false;
			var code = key[hashCode]();
			var list = this._store.get(code);
			if (!list) return false;
			return list.some(function (x) {
				return (0, _eq2['default'])(x, key);
			});
		}
	}, {
		key: 'get',
		value: function get(key) {
			var result = _get(Object.getPrototypeOf(HashMap.prototype), 'get', this).call(this, key);
			if (result !== undefined) return result;
			if (_get(Object.getPrototypeOf(HashMap.prototype), 'has', this).call(this, key)) return undefined;
			if (!(typeof key[hashCode] === 'function')) return undefined;
			var code = key[hashCode]();
			var list = this._store.get(code);
			if (!list) return undefined;
			key = list.find(function (x) {
				return (0, _eq2['default'])(x, key);
			});
			if (key === undefined) return undefined;
			return _get(Object.getPrototypeOf(HashMap.prototype), 'get', this).call(this, key);
		}
	}, {
		key: 'set',
		value: function set(key, value) {
			if (!((0, _util.isObject)(key) && typeof key[hashCode] === 'function')) return _get(Object.getPrototypeOf(HashMap.prototype), 'set', this).call(this, key, value);
			var code = key[hashCode]();
			var list = this._store.get(code);
			if (!list) this._store.set(code, list = [key]);else {
				var k = list.find(function (x) {
					return (0, _eq2['default'])(x, key);
				});
				if (!k) list.push(key);else key = k;
			}
			return _get(Object.getPrototypeOf(HashMap.prototype), 'set', this).call(this, key, value);
		}
	}, {
		key: 'delete',
		value: function _delete(key) {
			if (!((0, _util.isObject)(key) && typeof key[hashCode] === 'function')) return _get(Object.getPrototypeOf(HashMap.prototype), 'delete', this).call(this, key);
			var code = key[hashCode]();
			var list = this._store.get(code);
			if (!list) return false;
			var i = list.findIndex(function (x) {
				return (0, _eq2['default'])(x, key);
			});
			if (!(i >= 0)) return false;

			var _list$splice = list.splice(i, 1);

			var _list$splice2 = _slicedToArray(_list$splice, 1);

			var k = _list$splice2[0];

			return _get(Object.getPrototypeOf(HashMap.prototype), 'delete', this).call(this, k);
		}
	}]);

	return HashMap;
})(_MapBase3['default']);

exports['default'] = HashMap;
module.exports = exports['default'];
//# sourceMappingURL=HashMap.js.map